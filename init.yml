# NOTE: Run using ansible-playbook -K init.yml
---
# The general play
- name: Setting up localhost
  hosts: localhost
  connection: local
  become: yes
  vars_files:
    - debug_mode.yml
    - pkgs_to_remove.yml
    - pkgs_to_install.yml

  tasks:
  - name: Remove unwanted KDE packages
    check_mode: '{{ debug_mode }}'
    ansible.builtin.apt:
      name: "{{ pkgs_to_remove + pkgs_to_remove_from_debian }}"
      state: absent
      
  - name: Remove these packages manually
    check_mode: '{{ debug_mode }}'
    block:
      - name: Attempting to remove packages
        ansible.builtin.shell:
          cmd: rm -r $(find / -name "{{ item }}")
          warn: false
        loop:
          - '*contactthemeeditor*'
          - '*contactprintthemeeditor*'
          - '*headerthemeeditor*'
          - '*pimdataexporter*'
          - '*sieveeditor*'
    rescue:
      - name: Files couldn't be found
        ansible.builtin.debug:
          msg: The files could not be found and have likely already been deleted'
      
  - name: Upgrade current packages on machine
    check_mode: '{{ debug_mode }}'
    ansible.builtin.apt:
      update_cache: yes
      upgrade: safe
      
  - name: Install net-tools
    check_mode: '{{ debug_mode }}'
    ansible.builtin.apt:
      name: net-tools
      state: latest
      
  - name: Make edits to /etc/sudoers
    check_mode: '{{ debug_mode }}'
    become_user: "{{ lookup('ansible.builtin.env', 'USER') }}"
    ansible.builtin.command:
      cmd: konsole -e 'bash visudo_edits.sh apt dpkg'
      
  - name: Removing GRUB menu timeout
    check_mode: '{{ debug_mode }}'
    ansible.builtin.replace:
      path: /etc/default/grub
      regexp: 'GRUB_TIMEOUT=5'
      replace: 'GRUB_TIMEOUT=-1'
      
  - name: Updating GRUB
    check_mode: '{{ debug_mode }}'
    ansible.builtin.command:
      cmd: update-grub
      
  - name: Installing packages
    check_mode: '{{ debug_mode }}'
    ansible.builtin.apt:
      name: "{{ pkgs_to_install }}"
      state: present
    
  # NOTE: Place code for installing RStudio here (if needed)
  # NOTE: Place code for Raspberry Pi cluster-related stuff here
  
  # TODO: Fit these in the ZSH section later
  #echo 'source /etc/profile.d/modules.sh' >> "$HOME"/.zshrc
  #echo 'module load mpi/openmpi-x86_64' >> "$HOME"/.zshrc
  
  # TODO: Vivi installation is next

# Play for user program configuations
- name: Installing and configuring user programs
  hosts: localhost
  connection: local
  vars_files:
    - debug_mode.yml
    - pkgs_to_install.yml
    - aliases.yml

  tasks:
  - name: Writing aliases to "{{ aliases_file }}"
    check_mode: '{{ debug_mode }}'
    ansible.builtin.shell:
      cmd: echo "alias {{item.key}}='{{ item.value }}'" >> "{{ aliases_file }}"
    loop: "{{ aliases | dict2items }}"
      
  - name: Reassign Okular shortcut for full screen mode from Ctrl+Shift+F to F11
    check_mode: '{{ debug_mode }}'
    ansible.builtin.replace:
      path: ~/.local/share/kxmlgui5/okular/shell.rc
      regexp: '</gui>' # NOTE: This might need to be </kpartgui>
      replace: '  <Action shortcut="F11" name="fullscreen"/>\n </ActionProperties>\n</gui>'
    
  - name: Installing JFLAP
    check_mode: '{{ debug_mode }}'
    ansible.builtin.get_url:
      url: https://www.jflap.org/jflaptmp/july27-18/JFLAP7.1.jar
      dest: "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/bin"
      
  - name: Configuring VMM (Virtual Machine Manager)
    check_mode: '{{ debug_mode }}'
    ansible.builtin.command:
      cmd: konsole -e 'bash install_VMM.sh "debian bullseye" apt'
      
  - name: Installing pip packages
    check_mode: '{{ debug_mode }}'
    ansible.builtin.pip:
      name: '{{ pkgs_to_install_from_pip }}'
      
- ansible.builtin.import_playbook: nano_config.yml
- ansible.builtin.import_playbook: ssh_config.yml
- ansible.builtin.import_playbook: git_config.yml
- ansible.builtin.import_playbook: local.yml
- ansible.builtin.import_playbook: quentier.yml
- ansible.builtin.import_playbook: OCaml_for_Debian.yml
- ansible.builtin.import_playbook: Io.yml
- ansible.builtin.import_playbook: vim_config.yml
- ansible.builtin.import_playbook: vivi.yml
- ansible.builtin.import_playbook: vmware_horizon.yml
